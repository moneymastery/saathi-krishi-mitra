import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Download, Share2, FileJson, FileText, Music, Image } from "lucide-react";
import { toast } from "sonner";
import { Field } from "@/types/field";

interface ExportShareDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  field: Field;
  mode: "export" | "share";
}

export const ExportShareDialog = ({ open, onOpenChange, field, mode }: ExportShareDialogProps) => {
  
  const exportAsGeoJSON = () => {
    const geoJSON = {
      type: "Feature",
      properties: {
        name: field.name,
        crop: field.cropType,
        variety: field.variety,
        area: field.area,
        sowingDate: field.sowingDate,
      },
      geometry: field.geometry
    };

    const blob = new Blob([JSON.stringify(geoJSON, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${field.name.replace(/\s+/g, '_')}_boundary.geojson`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast.success("GeoJSON downloaded");
    onOpenChange(false);
  };

  const exportAsPDF = () => {
    // TODO: Implement PDF generation with field summary, map, indices
    toast.info("PDF export coming soon - will include field map, indices table, and recommendations");
  };

  const exportAsCSV = () => {
    const headers = "Field Name,Crop,Variety,Area (ha),Sowing Date,NDVI,MSAVI2,NDRE\n";
    const data = `${field.name},${field.cropType},${field.variety},${field.area},${field.sowingDate},${field.currentHealth?.ndvi || 'N/A'},${field.currentHealth?.msavi2 || 'N/A'},${field.currentHealth?.ndre || 'N/A'}`;
    
    const blob = new Blob([headers + data], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${field.name.replace(/\s+/g, '_')}_data.csv`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast.success("CSV downloaded");
    onOpenChange(false);
  };

  const exportAudioReport = () => {
    // Generate audio summary
    const text = `Field report for ${field.name}. Growing ${field.cropType}, variety ${field.variety}. Total area: ${field.area} hectares. Sown on ${new Date(field.sowingDate).toLocaleDateString()}. Current health status: ${field.currentHealth?.status || 'Unknown'}.`;
    
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'en-US';
    window.speechSynthesis.speak(utterance);
    
    toast.success("Playing audio report (Download MP3 coming soon)");
  };

  const shareViaWhatsApp = () => {
    const message = `üìä *Field Report: ${field.name}*\n\nüåæ Crop: ${field.cropType} (${field.variety})\nüìè Area: ${field.area} ha\nüìÖ Sown: ${new Date(field.sowingDate).toLocaleDateString()}\nüíö Health: ${field.currentHealth?.status || 'Unknown'}\nüî¨ NDVI: ${field.currentHealth?.ndvi.toFixed(2) || 'N/A'}\n\n_Generated by Soil Saathi_`;
    
    const url = `https://wa.me/?text=${encodeURIComponent(message)}`;
    window.open(url, '_blank');
    
    toast.success("Opening WhatsApp");
    onOpenChange(false);
  };

  const shareViaEmail = () => {
    const subject = `Field Report: ${field.name}`;
    const body = `Field: ${field.name}\nCrop: ${field.cropType} (${field.variety})\nArea: ${field.area} ha\nSowing Date: ${new Date(field.sowingDate).toLocaleDateString()}\nHealth Status: ${field.currentHealth?.status || 'Unknown'}\n\nGenerated by Soil Saathi`;
    
    window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    toast.success("Opening email client");
    onOpenChange(false);
  };

  const copyToClipboard = () => {
    const text = `Field: ${field.name}\nCrop: ${field.cropType} (${field.variety})\nArea: ${field.area} ha\nNDVI: ${field.currentHealth?.ndvi.toFixed(2) || 'N/A'}`;
    navigator.clipboard.writeText(text);
    toast.success("Field summary copied to clipboard");
  };

  if (mode === "export") {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Download className="w-5 h-5" />
              Export Field Data
            </DialogTitle>
          </DialogHeader>

          <div className="space-y-3 pt-4">
            <Card 
              className="p-4 hover:bg-accent cursor-pointer transition-colors"
              onClick={exportAsPDF}
            >
              <div className="flex items-center gap-3">
                <FileText className="w-8 h-8 text-destructive" />
                <div className="flex-1">
                  <p className="font-semibold text-sm">PDF Report</p>
                  <p className="text-xs text-muted-foreground">
                    Full summary with map, indices & recommendations
                  </p>
                </div>
              </div>
            </Card>

            <Card 
              className="p-4 hover:bg-accent cursor-pointer transition-colors"
              onClick={exportAsGeoJSON}
            >
              <div className="flex items-center gap-3">
                <FileJson className="w-8 h-8 text-primary" />
                <div className="flex-1">
                  <p className="font-semibold text-sm">GeoJSON Boundary</p>
                  <p className="text-xs text-muted-foreground">
                    Field boundary for GIS software
                  </p>
                </div>
              </div>
            </Card>

            <Card 
              className="p-4 hover:bg-accent cursor-pointer transition-colors"
              onClick={exportAsCSV}
            >
              <div className="flex items-center gap-3">
                <FileText className="w-8 h-8 text-success" />
                <div className="flex-1">
                  <p className="font-semibold text-sm">CSV Data</p>
                  <p className="text-xs text-muted-foreground">
                    Field metrics in spreadsheet format
                  </p>
                </div>
              </div>
            </Card>

            <Card 
              className="p-4 hover:bg-accent cursor-pointer transition-colors"
              onClick={exportAudioReport}
            >
              <div className="flex items-center gap-3">
                <Music className="w-8 h-8 text-info" />
                <div className="flex-1">
                  <p className="font-semibold text-sm">Audio Report (MP3)</p>
                  <p className="text-xs text-muted-foreground">
                    Voice summary for offline playback
                  </p>
                </div>
              </div>
            </Card>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  // Share mode
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Share2 className="w-5 h-5" />
            Share Field Report
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-3 pt-4">
          <Card 
            className="p-4 hover:bg-accent cursor-pointer transition-colors"
            onClick={shareViaWhatsApp}
          >
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-full bg-green-500 flex items-center justify-center">
                <span className="text-white text-xl">üì±</span>
              </div>
              <div className="flex-1">
                <p className="font-semibold text-sm">WhatsApp</p>
                <p className="text-xs text-muted-foreground">
                  Send field summary via WhatsApp
                </p>
              </div>
            </div>
          </Card>

          <Card 
            className="p-4 hover:bg-accent cursor-pointer transition-colors"
            onClick={shareViaEmail}
          >
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center">
                <span className="text-white text-xl">‚úâÔ∏è</span>
              </div>
              <div className="flex-1">
                <p className="font-semibold text-sm">Email</p>
                <p className="text-xs text-muted-foreground">
                  Share via email with attachments
                </p>
              </div>
            </div>
          </Card>

          <Card 
            className="p-4 hover:bg-accent cursor-pointer transition-colors"
            onClick={copyToClipboard}
          >
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-full bg-purple-500 flex items-center justify-center">
                <span className="text-white text-xl">üìã</span>
              </div>
              <div className="flex-1">
                <p className="font-semibold text-sm">Copy to Clipboard</p>
                <p className="text-xs text-muted-foreground">
                  Copy field summary as text
                </p>
              </div>
            </div>
          </Card>

          <div className="pt-2">
            <Button variant="outline" className="w-full" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
